---
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "swiper/css/free-mode";
import "swiper/css/thumbs";
import imgAbuila1 from "../assets/proyectos/1.CASA_ABULIA/img1.jpg";
import imgHorizonte1 from "../assets/proyectos/2.CASA_HORIZONTE/img1.jpg";
import imgLienzo1 from "../assets/proyectos/3.CASA_LIENZO/img1.jpg";
import imgCasaP2 from "../assets/proyectos/4.CASA_P/img2.jpg";
import imgCasaSol1 from "../assets/proyectos/5.CASA_SOL/img1.jpg";
---

<section>
  <!-- Swiper -->
  <div class="swiper mySwiper2">
    <div class="swiper-wrapper">
      <div class="swiper-slide">
        <img src={imgAbuila1.src} alt="Proyecto Casa Abuila"/>
        <span class="slide-title">CASA ABUILA</span>
      </div>
      <div class="swiper-slide">
        <img src={imgHorizonte1.src} alt="Proyecto Casa Horizonte"/>
        <span class="slide-title">CASA HORIZONTE</span>
      </div>
      <div class="swiper-slide">
        <img src={imgLienzo1.src} alt="Proyecto Casa lienzo"/>
        <span class="slide-title">CASA LIENZO</span>
      </div>
      <div class="swiper-slide">
        <img src={imgCasaP2.src} alt="Proyecto Casa P"/>
        <span class="slide-title">CASA P</span>
      </div>
      <div class="swiper-slide">
        <img src={imgCasaSol1.src} alt="Proyecto Casa Sol"/>
        <span class="slide-title">CASA SOL</span>
      </div>
    </div>
    <div class="swiper-button-next"></div>
    <div class="swiper-button-prev"></div>
    <div class="swiper-pagination"></div>
  </div>
  <div class="swiper mySwiper">
    <div class="swiper-wrapper">
      <a href="/proyectos" class="swiper-slide">
          <img src={imgAbuila1.src} />
          <span class="slide-title-thumb">CASA ABUILA</span>
      </a>
      <a href="/proyectos#casa-horizonte" class="swiper-slide">
        <img src={imgHorizonte1.src} />
        <span class="slide-title-thumb">CASA HORIZONTE</span>
      </a>
      <a href="/proyectos#casa-lienzo" class="swiper-slide">
        <img src={imgLienzo1.src} />
        <span class="slide-title-thumb">CASA LIENZO</span>
      </a>
      <a href="/proyectos#casa-p" class="swiper-slide">
        <img src={imgCasaP2.src} />
        <span class="slide-title-thumb">CASA P</span>
      </a>
      <a href="/proyectos#casa-sol" class="swiper-slide">
        <img src={imgCasaSol1.src} />
        <span class="slide-title-thumb">CASA SOL</span>
      </a>
    </div>
  </div>
</section>

<style>
  section {
    position: relative;
    background: #000;
    color: #fff;
    margin: 0;
    padding: 0;
    height: 100%;
  }
  .swiper {
    width: 100%;
    height: 100%;
  }

  .swiper-slide {
    text-align: center;
    font-size: 18px;
    background: #444;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .swiper-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .swiper {
    width: 100%;
    height: 300px;
    margin-left: auto;
    margin-right: auto;
  }

  .swiper-slide {
    background-size: cover;
    background-position: center;
  }

  .mySwiper2 {
    height: 80%;
    width: 100%;
  }

  .mySwiper {
    height: 20%;
    box-sizing: border-box;
    padding: 1px 0 0 0;
  }

  .mySwiper .swiper-slide {
    width: 25%;
    height: 100%;
    opacity: 0.4;
  }

  .mySwiper .swiper-slide-thumb-active {
    opacity: 1;
  }

  .swiper-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .swiper-button-next,
  .swiper-button-prev {
    color: red;
    transition: opacity 0.3s ease;
  }
  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    opacity: 0.8;
  }
  .slide-title {
    position: absolute;
    bottom: 10px;
    left: 40px;
    /* width: 100%; */
    color: #fff;
    font-size: 2.5rem;
    font-family: var(--cocogoose-light);
    padding: 5px 5px;
    text-align: left;
    z-index: 2;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
  }
  .slide-title-thumb {
    position: absolute;
    bottom: 5px;
    left: 8px;
    width: 90%;
    color: #fff;
    background: rgba(0, 0, 0, 0.6);
    font-size: 0.9rem;
    font-family: var(--cocogoose-light);
    padding: 2px 4px;
    text-align: left;
    z-index: 2;
    border-radius: 3px;
    backdrop-filter: blur(2px);
  }
  .mySwiper .swiper-slide {
    position: relative;
    border-radius: 0px;
    overflow: hidden;
  }
</style>

<script>
  import Swiper from "swiper";
  import { Navigation, Pagination, Thumbs, FreeMode } from "swiper/modules";

  // Canvas pool para reutilización y mejor performance
  const canvasPool = {
    canvas: null,
    ctx: null,
    getCanvas() {
      if (!this.canvas) {
        this.canvas = document.createElement("canvas");
        this.ctx = this.canvas.getContext("2d", { willReadFrequently: true });
      }
      return { canvas: this.canvas, ctx: this.ctx };
    },
    cleanup() {
      if (this.canvas) {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      }
    },
  };

  // Cache de brightness para evitar recálculos
  const brightnessCache = new Map();

  function getBrightness(img) {
    // Check cache first
    const cacheKey = img.src;
    if (brightnessCache.has(cacheKey)) {
      return brightnessCache.get(cacheKey);
    }

    const { canvas, ctx } = canvasPool.getCanvas();

    // Analizar solo la zona de la navbar (optimizado)
    const navbarHeight = 132;
    const sampleHeight = Math.min(navbarHeight * 1.2, img.naturalHeight * 0.2);
    const maxWidth = 300; // Limitar ancho para mejor performance

    canvas.width = Math.min(img.naturalWidth, maxWidth);
    canvas.height = sampleHeight;

    try {
      ctx.drawImage(
        img,
        0,
        0,
        img.naturalWidth,
        sampleHeight,
        0,
        0,
        canvas.width,
        canvas.height
      );

      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imageData.data;

      // Análisis por zonas (izquierda, centro, derecha)
      const width = canvas.width;
      const height = canvas.height;
      const totalPixels = width * height;

      let totalR = 0,
        totalG = 0,
        totalB = 0;
      let sampleCount = 0;

      // Muestrear cada 8 píxeles para mejor performance
      for (let i = 0; i < data.length; i += 32) {
        totalR += data[i];
        totalG += data[i + 1];
        totalB += data[i + 2];
        sampleCount++;
      }

      const avgR = totalR / sampleCount;
      const avgG = totalG / sampleCount;
      const avgB = totalB / sampleCount;

      // Fórmula de luminancia estándar
      const brightness = Math.round(avgR * 0.299 + avgG * 0.587 + avgB * 0.114);

      // Cache result
      brightnessCache.set(cacheKey, brightness);

      // Cleanup canvas
      canvasPool.cleanup();

      return brightness;
    } catch (e) {
      return analyzeFallbackBrightness(img);
    }
  }

  function analyzeFallbackBrightness(img) {
    const container = img.closest(".swiper-slide") || img.parentElement;
    const style = window.getComputedStyle(container);
    const bgColor = style.backgroundColor;

    if (
      bgColor &&
      bgColor !== "rgba(0, 0, 0, 0)" &&
      bgColor !== "transparent"
    ) {
      const rgb = bgColor.match(/\d+/g);
      if (rgb && rgb.length >= 3) {
        const brightness = Math.round(
          rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114
        );
        return brightness;
      }
    }

    // Analizar color dominante de la imagen usando técnicas alternativas
    try {
      const rect = img.getBoundingClientRect();
      if (rect.width > 0 && rect.height > 0) {
        // Usar análisis de gradiente o color promedio del CSS background-image si existe
        const computedStyle = window.getComputedStyle(img);
        const bgImage = computedStyle.backgroundImage;
        if (bgImage && bgImage !== "none") {
          return 160; // Asumir bright para backgrounds
        }
      }
    } catch (e) {
      // 
    }

    return 128; // Neutral por defecto
  }

  // Debounced emit function
  let emitTimeout = null;
  function emitBrightness() {
    clearTimeout(emitTimeout);
    emitTimeout = setTimeout(() => {
      const activeImg = document.querySelector(
        ".mySwiper2 .swiper-slide-active img"
      );
      if (!activeImg) {
        return;
      }

      function send() {
        const brightness = getBrightness(activeImg);

        window.dispatchEvent(
          new CustomEvent("slider-brightness", {
            detail: {
              brightness,
              imageSrc: activeImg.src,
              timestamp: Date.now(),
            },
          })
        );
      }

      if (activeImg.complete && activeImg.naturalHeight !== 0) {
        send();
      } else {
        const handleLoad = () => {
          send();
          activeImg.removeEventListener("load", handleLoad);
        };
        activeImg.addEventListener("load", handleLoad);

        // Timeout de seguridad
        setTimeout(() => {
          if (!activeImg.complete) {
            send();
          }
        }, 2000);
      }
    }, 150); // Debounce de 150ms
  }

  // Inicializar Swipers
  const swiper = new Swiper(".mySwiper", {
    spaceBetween: 3,
    slidesPerView: 4,
    freeMode: true,
    watchSlidesProgress: true,
    breakpoints: {
      320: {
        slidesPerView: 2,
        spaceBetween: 2,
      },
      640: {
        slidesPerView: 3,
        spaceBetween: 2,
      },
      768: {
        slidesPerView: 4,
        spaceBetween: 3,
      },
    },
  });

  const swiper2 = new Swiper(".mySwiper2", {
    modules: [Pagination, Navigation, Thumbs, FreeMode],
    spaceBetween: 10,
    speed: 400,
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev",
    },
    pagination: {
      el: ".swiper-pagination",
      clickable: true,
    },
    thumbs: {
      swiper: swiper,
    },
    on: {
      slideChange: function () {
        // Pequeño delay para asegurar que el slide esté completamente activo
        setTimeout(emitBrightness, 50);
      },
      init: function () {
        // Disparar después de la inicialización completa
        setTimeout(emitBrightness, 200);
      },
      slideChangeTransitionEnd: function () {
        // Verificar después de que la transición termine completamente
        setTimeout(emitBrightness, 100);
      },
    },
  });

  // Event listeners optimizados
  document.addEventListener("DOMContentLoaded", () => {
    setTimeout(emitBrightness, 300);
  });

  window.addEventListener("load", () => {
    setTimeout(emitBrightness, 100);
  });

  // Cleanup al salir de la página
  window.addEventListener("beforeunload", () => {
    brightnessCache.clear();
    canvasPool.cleanup();
    clearTimeout(emitTimeout);
  });

  // Exponer funciones globalmente para debugging
  window.galleryDebug = {
    getBrightness,
    emitBrightness,
    clearCache: () => brightnessCache.clear(),
    cacheSize: () => brightnessCache.size,
  };
</script>
